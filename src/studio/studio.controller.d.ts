import { ReviewService } from '../review/review.service';
import { UserService } from '../users/user.service';
import { StudioDto } from './dto/studio.dto';
import { StudioFilter } from './dto/studio.filter';
import { StudioRegistrationDto } from './dto/studio.registration.dto';
import { Studio } from './studio.entity';
import { StudioService } from './studio.service';
import { UserNotificationService } from '../userNotification/userNotification.service';
import { AppointmentService } from '../appointment/appointment.service';
export declare class StudioController {
    private readonly userService;
    private reviewService;
    private studioService;
    private readonly appointmentService;
    private UserNotificationService;
    private log;
    constructor(userService: UserService, reviewService: ReviewService, studioService: StudioService, appointmentService: AppointmentService, UserNotificationService: UserNotificationService);
    getStudio(studioId: string): Promise<StudioDto>;
    getUserStudios(userId: string): Promise<StudioDto[]>;
    getStudiosForAdmin(): Promise<any>;
    getStudios(filter?: StudioFilter): Promise<StudioDto[]>;
    getAppointStudio(): Promise<any>;
    getStudioReviews(studioId: string): Promise<import("../review/review.entity").Review[]>;
    publishStudio(studioId: string, isLive: boolean): Promise<StudioDto>;
    approveStudio(studioId: string, status: string, reason: string): Promise<StudioDto>;
    registerStudio(studioReg: StudioRegistrationDto): Promise<StudioDto>;
    saveStudioDraft(studioReg: StudioRegistrationDto): Promise<StudioDto>;
    flagStudio(studioId: string, userId: string, text: string): Promise<string>;
    hasActiveStudio(userId: string): Promise<boolean>;
    mergeWithEntity(studioReg: StudioRegistrationDto, studio: Studio): Studio;
}
