import { Repository } from 'typeorm';
import { CalendarService } from '../calendar/calendar.service';
import { CommunicationService } from '../communication/communication.service';
import { Studio } from '../studio/studio.entity';
import { SessionListDto } from '../users/SessionListDto';
import { User } from '../users/user.entity';
import { Appointment } from './appointment.entity';
import { CreateAppointmentDto, GetStudioBookingsResponse } from './appointment.requests';
import { UserNotificationService } from '../userNotification/userNotification.service';
import { UserService } from '../users/user.service';
import { StudioService } from '../studio/studio.service';
export declare class AppointmentService {
    private readonly appointmentRepo;
    private readonly commsService;
    private readonly calendarService;
    private userService;
    private UserNotificationService;
    private studioService;
    private logger;
    constructor(appointmentRepo: Repository<Appointment>, commsService: CommunicationService, calendarService: CalendarService, userService: UserService, UserNotificationService: UserNotificationService, studioService: StudioService);
    createOrUpdate(appt: Appointment): Promise<Appointment>;
    getBooking(appointmentId: string): Promise<Appointment>;
    studioBookings(studioId: string): Promise<Appointment[]>;
    studioCalenders(studioId: string): Promise<import("../calendar/calendar.entity").CalendarEntity[]>;
    getBookingsOfStudio(studioId: any, currentDate: string, timeZone: string): Promise<GetStudioBookingsResponse>;
    getBookings(studioId: any, currentDate: string): Promise<GetStudioBookingsResponse>;
    getBookingsForUser(user: User): Promise<SessionListDto>;
    getStudioBookings(studio: Studio): Promise<Appointment[]>;
    getStudioByStudioId(id: string): Promise<any>;
    createBooking(data: CreateAppointmentDto, studio: Studio, user: User): Promise<string>;
    getStudioBooking(studio: Studio): Promise<Appointment[]>;
    getPreviousAppointments(user: User): Promise<Appointment[]>;
    apptsGuestNeedsToReview(user: User): Promise<Appointment[]>;
    apptsHostNeedsToReview(studios: Studio[]): Promise<Appointment[]>;
    cancelAppointmentData(apptId: string): Promise<import("typeorm").UpdateResult>;
    cancelAppointment(apptId: string, reason: string, cancelledByUserId: string): Promise<Appointment>;
    markApptAsConfirmed(apptId: string): Promise<Appointment>;
    getAllStudiosForAdmin(): Promise<string[]>;
    getAll(): Promise<Appointment[]>;
    getAllAppts(): Promise<number>;
    getApptAll(): Promise<Appointment[]>;
    updateAppointment(appointment: any): Promise<any>;
    updateEarningVariable(appointment: any): Promise<any>;
    updateAppointmentReq(appointmentId: string): Promise<any>;
    updatePayment(appointmentId: string): Promise<any>;
}
